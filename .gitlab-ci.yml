stages:
  - build
  - deploy

.docker: &docker
  image: docker:20.10-git
  services:
    - docker:20.10-dind
  before_script:
    - echo "Docker login..."
    - docker login -u $DOCKER_USER -p $DOCKER_PASSWORD

.build_docker_script: &build_docker_script
  <<: *docker
  script:
    - echo "Building image..."
    - docker build -t $REPOSITORY_URL:$CI_COMMIT_SHORT_SHA .
    - echo "Tagging image..."
    - docker tag $REPOSITORY_URL:$CI_COMMIT_SHORT_SHA $REPOSITORY_URL:latest
  after_script:
    - echo "Pushing image..."
    - docker push $REPOSITORY_URL:$CI_COMMIT_SHORT_SHA
    - docker push $REPOSITORY_URL:latest

.deploy_ecs_script: &deploy_ecs_script
  image: registry.gitlab.com/gitlab-org/cloud-deploy/aws-ecs:latest
  before_script:
    - apt-get update -y && apt-get install -y gettext
    - export PRIVATE_SUBNET_ID="$(aws ec2 describe-subnets --filters "Name=tag:Name,Values=Private" --query "Subnets[*].SubnetId" --output text)"
    - export PUBLIC_SUBNET_ID="$(aws ec2 describe-subnets --filters "Name=tag:Name,Values=Public" --query "Subnets[*].SubnetId" --output text)"
    - export MYSQL_DB="$(aws ec2 describe-instances --filters "Name=tag:Name,Values=PrivateServer" --query 'Reservations[*].Instances[*].PrivateIpAddress' --output text)"
  script:
    - envsubst < ecs/$CI_AWS_ECS_TASK_DEFINITION_FILE > $CI_AWS_ECS_TASK_DEFINITION_FILE
    - echo "Registering new task definition..."
    - aws ecs register-task-definition --region "${AWS_DEFAULT_REGION}" --cli-input-json file://$CI_AWS_ECS_TASK_DEFINITION_FILE
    - echo "Updating the service..."
    - aws ecs update-service --force-new-deployment --region "${AWS_DEFAULT_REGION}" --cluster "${CI_AWS_ECS_CLUSTER}" --service "${CI_AWS_SERVICE}"  --task-definition "${CI_AWS_TASK_DEFINITION}"


build_frontend:
  <<: *build_docker_script
  stage: build
  variables:
    REPOSITORY_URL: kibrovic/frontend-task
  rules:
    - if: $ENVIRONMENT_NAME == "development" && $BUILD == "true"

deploy_frontend:
  <<: *deploy_ecs_script
  stage: deploy
  variables:
    REPOSITORY_URL: kibrovic/frontend-task
    CI_AWS_ECS_CLUSTER: arm_ecs_cluster
    CI_AWS_SERVICE: frontend-service
    CI_AWS_ECS_TASK_DEFINITION_FILE: frontend-task.json
    CI_AWS_TASK_DEFINITION: frontend-task
    MYSQL_DB: ip-192-168-1-5.eu-central-1.compute.internal
  rules:
    - if: $ENVIRONMENT_NAME == "development"

deploy_database:
  <<: *deploy_ecs_script
  stage: deploy
  variables:
    REPOSITORY_URL: mysql
    CI_AWS_ECS_CLUSTER: arm_ecs_cluster
    CI_AWS_SERVICE: database-service
    CI_AWS_ECS_TASK_DEFINITION_FILE: database-task.json
    CI_AWS_TASK_DEFINITION: database-task
    MYSQL_DATABSE: DBWT19
  rules:
    - if: $ENVIRONMENT_NAME == "development"